#!/usr/bin/env python3
"""
N·ªÅn t·∫£ng Ph√¢n t√≠ch Thu·ªëc Th√¥ng minh - Streamlit UI
=================================================

N·ªÅn t·∫£ng t√¨m ki·∫øm v√† ph√¢n t√≠ch thu·ªëc to√†n di·ªán s·ª≠ d·ª•ng ChromaDB v√† AI.
"""

import streamlit as st
import chromadb
from sentence_transformers import SentenceTransformer
import pandas as pd
import plotly.express as px
import numpy as np

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="N·ªÅn t·∫£ng Ph√¢n t√≠ch Thu·ªëc Th√¥ng minh",
    page_icon="üíä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        padding: 1rem 0;
        border-bottom: 3px solid #1f77b4;
        margin-bottom: 2rem;
    }
    .search-box {
        border-radius: 10px;
        border: 2px solid #1f77b4;
    }
    .metric-card {
        background-color: ##112838;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #1f77b4;
    }
    .drug-card {
        border: 1px solid #ddd;
        border-radius: 10px;
        padding: 1rem;
        margin: 0.5rem 0;
        background-color: ##112838;
    }
    .similarity-score {
        color: #1f77b4;
        font-weight: bold;
        font-size: 1.1rem;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_resource
def setup_chromadb():
    """Thi·∫øt l·∫≠p ChromaDB client v√† collections"""
    try:
        client = chromadb.PersistentClient(path="./chroma_db")
        collections = {
            'drugs_main': client.get_collection("drugs_main"),
            'drugs_side_effects': client.get_collection("drugs_side_effects"),
            'drugs_composition': client.get_collection("drugs_composition"),
            'drugs_reviews': client.get_collection("drugs_reviews")
        }
        return client, collections
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi ChromaDB: {e}")
        return None, None

@st.cache_resource
def load_model():
    """T·∫£i m√¥ h√¨nh sentence transformer"""
    try:
        with st.spinner("ƒêang t·∫£i m√¥ h√¨nh AI..."):
            model = SentenceTransformer("sentence-transformers/all-MiniLM-L6-v2")
        return model
    except Exception as e:
        st.error(f"L·ªói t·∫£i m√¥ h√¨nh: {e}")
        return None

def search_medicines(collection, query_text: str, model, n_results: int = 5):
    """T√¨m ki·∫øm thu·ªëc s·ª≠ d·ª•ng ƒë·ªô t∆∞∆°ng ƒë·ªìng ng·ªØ nghƒ©a"""
    try:
        query_embedding = model.encode(query_text).tolist()
        results = collection.query(
            query_embeddings=[query_embedding],
            n_results=n_results,
            include=["metadatas", "documents", "distances"]
        )
        return results
    except Exception as e:
        st.error(f"L·ªói t√¨m ki·∫øm: {e}")
        return None

def format_similarity(distance: float) -> str:
    """ƒê·ªãnh d·∫°ng ƒëi·ªÉm t∆∞∆°ng ƒë·ªìng th√†nh ph·∫ßn trƒÉm"""
    return f"{(1 - distance) * 100:.1f}%"

def semantic_search_page(collections, model):
    """Trang 1: T√¨m ki·∫øm Ng·ªØ nghƒ©a"""
    st.markdown('<div class="main-header">üîç T√¨m ki·∫øm Ng·ªØ nghƒ©a</div>', unsafe_allow_html=True)
    
    st.markdown("### T√¨m thu·ªëc b·∫±ng m√¥ t·∫£ ng√¥n ng·ªØ t·ª± nhi√™n")
    
    # √î t√¨m ki·∫øm
    col1, col2 = st.columns([4, 1])
    with col1:
        query = st.text_input(
            "M√¥ t·∫£ tri·ªáu ch·ª©ng ho·∫∑c lo·∫°i thu·ªëc c·∫ßn t√¨m:",
            placeholder="V√≠ d·ª•: gi·∫£m ƒëau, ƒëau ƒë·∫ßu, kh√°ng sinh, thu·ªëc tim",
            key="search_query"
        )
    with col2:
        search_button = st.button("üîç T√¨m ki·∫øm", type="primary")
    
    # T√πy ch·ªçn t√¨m ki·∫øm
    with st.expander("T√πy ch·ªçn t√¨m ki·∫øm"):
        col1, col2 = st.columns(2)
        with col1:
            num_results = st.slider("S·ªë k·∫øt qu·∫£", 5, 20, 10)
        with col2:
            search_collection = st.selectbox(
                "T√¨m ki·∫øm trong:",
                ["C∆° s·ªü d·ªØ li·ªáu ch√≠nh", "Theo th√†nh ph·∫ßn", "Theo t√°c d·ª•ng ph·ª•"],
                index=0
            )
    
    if search_button and query:
        with st.spinner("ƒêang t√¨m ki·∫øm thu·ªëc..."):
            # Ch·ªçn collection
            if search_collection == "C∆° s·ªü d·ªØ li·ªáu ch√≠nh":
                collection = collections['drugs_main']
            elif search_collection == "Theo th√†nh ph·∫ßn":
                collection = collections['drugs_composition']
            else:
                collection = collections['drugs_side_effects']
            
            results = search_medicines(collection, query, model, num_results)
            
            if results and results['metadatas'][0]:
                st.success(f"T√¨m th·∫•y {len(results['metadatas'][0])} thu·ªëc ph√π h·ª£p v·ªõi t√¨m ki·∫øm c·ªßa b·∫°n")
                
                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                for i, metadata in enumerate(results['metadatas'][0]):
                    distance = results['distances'][0][i]
                    similarity = format_similarity(distance)
                    
                    with st.container():
                        st.markdown(f"""
                        <div class="drug-card">
                            <h4>üíä {metadata['medicine_name']}</h4>
                            <p><strong>ƒê·ªô t∆∞∆°ng ƒë·ªìng:</strong> <span class="similarity-score">{similarity}</span></p>
                            <p><strong>üß™ Th√†nh ph·∫ßn:</strong> {metadata['composition'][:100]}...</p>
                            <p><strong>üéØ C√¥ng d·ª•ng:</strong> {metadata['uses'][:150]}...</p>
                            <p><strong>üè≠ H√£ng s·∫£n xu·∫•t:</strong> {metadata['manufacturer']}</p>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        # Ch·ªâ s·ªë ƒë√°nh gi√°
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("ƒê√°nh gi√° xu·∫•t s·∫Øc", f"{metadata['excellent_review']}%", delta=None)
                        with col2:
                            st.metric("ƒê√°nh gi√° trung b√¨nh", f"{metadata['average_review']}%", delta=None)
                        with col3:
                            st.metric("ƒê√°nh gi√° k√©m", f"{metadata['poor_review']}%", delta=None)
                        
                        st.markdown("---")
            else:
                st.warning("Kh√¥ng t√¨m th·∫•y thu·ªëc n√†o ph√π h·ª£p v·ªõi ti√™u ch√≠ t√¨m ki·∫øm c·ªßa b·∫°n.")

def drug_substitution_page(collections, model):
    """Trang 2: Thay th·∫ø Thu·ªëc"""
    st.markdown('<div class="main-header">üîÑ Thay th·∫ø Thu·ªëc</div>', unsafe_allow_html=True)
    
    st.markdown("### T√¨m thu·ªëc thay th·∫ø c√≥ t√°c d·ª•ng t∆∞∆°ng t·ª±")
    
    # Nh·∫≠p li·ªáu
    medicine_name = st.text_input(
        "Nh·∫≠p t√™n thu·ªëc c·∫ßn t√¨m thay th·∫ø:",
        placeholder="V√≠ d·ª•: Paracetamol, Aspirin, Amoxicillin"
    )
    
    # T√πy ch·ªçn l·ªçc
    col1, col2 = st.columns(2)
    with col1:
        avoid_side_effects = st.checkbox("Tr√°nh thu·ªëc c√≥ t√°c d·ª•ng ph·ª• m·∫°nh")
    with col2:
        prefer_good_reviews = st.checkbox("∆Øu ti√™n thu·ªëc c√≥ ƒë√°nh gi√° t·ªët")
    
    if st.button("T√¨m Thay th·∫ø", type="primary") and medicine_name:
        with st.spinner("ƒêang t√¨m thu·ªëc thay th·∫ø..."):
            # T√¨m trong collection th√†nh ph·∫ßn
            results = search_medicines(collections['drugs_composition'], medicine_name, model, 10)
            
            if results and results['metadatas'][0]:
                alternatives = []
                for i, metadata in enumerate(results['metadatas'][0]):
                    distance = results['distances'][0][i]
                    
                    # √Åp d·ª•ng b·ªô l·ªçc
                    if avoid_side_effects and metadata.get('poor_review', 0) > 30:
                        continue
                    if prefer_good_reviews and metadata.get('excellent_review', 0) < 50:
                        continue
                    
                    alternatives.append({
                        'name': metadata['medicine_name'],
                        'similarity': (1 - distance) * 100,
                        'composition': metadata['composition'],
                        'uses': metadata['uses'],
                        'manufacturer': metadata['manufacturer'],
                        'excellent_review': metadata.get('excellent_review', 0),
                        'poor_review': metadata.get('poor_review', 0)
                    })
                
                if alternatives:
                    st.success(f"T√¨m th·∫•y {len(alternatives)} thu·ªëc thay th·∫ø")
                    
                    # T√πy ch·ªçn s·∫Øp x·∫øp
                    sort_by = st.selectbox("S·∫Øp x·∫øp theo:", ["ƒê·ªô t∆∞∆°ng ƒë·ªìng", "ƒêi·ªÉm ƒë√°nh gi√°"])
                    
                    if sort_by == "ƒêi·ªÉm ƒë√°nh gi√°":
                        alternatives.sort(key=lambda x: x['excellent_review'], reverse=True)
                    else:
                        alternatives.sort(key=lambda x: x['similarity'], reverse=True)
                    
                    # Hi·ªÉn th·ªã thu·ªëc thay th·∫ø
                    for alt in alternatives:
                        col1, col2 = st.columns([3, 1])
                        with col1:
                            st.markdown(f"""
                            **üíä {alt['name']}**  
                            *ƒê·ªô t∆∞∆°ng ƒë·ªìng: {alt['similarity']:.1f}%*  
                            üß™ {alt['composition'][:80]}...  
                            üéØ {alt['uses'][:100]}...  
                            üè≠ {alt['manufacturer']}
                            """)
                        with col2:
                            st.metric("ƒê√°nh gi√° t·ªët", f"{alt['excellent_review']}%")
                        st.markdown("---")
                else:
                    st.warning("Kh√¥ng t√¨m th·∫•y thu·ªëc thay th·∫ø n√†o ph√π h·ª£p v·ªõi ti√™u ch√≠ l·ªçc c·ªßa b·∫°n.")
            else:
                st.warning("Kh√¥ng t√¨m th·∫•y thu·ªëc thay th·∫ø cho lo·∫°i thu·ªëc n√†y.")

def side_effects_analysis_page(collections):
    """Trang 3: Ph√¢n t√≠ch T√°c d·ª•ng Ph·ª•"""
    st.markdown('<div class="main-header">‚ö†Ô∏è Ph√¢n t√≠ch T√°c d·ª•ng Ph·ª• & T∆∞∆°ng t√°c</div>', unsafe_allow_html=True)
    
    st.markdown("### Ph√¢n t√≠ch t√°c d·ª•ng ph·ª• ti·ªÅm ·∫©n v√† t∆∞∆°ng t√°c thu·ªëc")
    
    # L·∫•y t·∫•t c·∫£ t√™n thu·ªëc ƒë·ªÉ multi-select
    try:
        all_medicines = collections['drugs_main'].get(include=["metadatas"])
        medicine_names = [meta['medicine_name'] for meta in all_medicines['metadatas']]
        medicine_names = sorted(list(set(medicine_names)))[:1000]  # Gi·ªõi h·∫°n ƒë·ªÉ tƒÉng hi·ªáu su·∫•t
    except:
        medicine_names = []
    
    # Multi-select cho thu·ªëc
    selected_medicines = st.multiselect(
        "Ch·ªçn thu·ªëc ƒë·ªÉ ph√¢n t√≠ch (ho·∫∑c g√µ ƒë·ªÉ t√¨m ki·∫øm):",
        options=medicine_names,
        help="Ch·ªçn nhi·ªÅu thu·ªëc ƒë·ªÉ ki·ªÉm tra t∆∞∆°ng t√°c"
    )
    
    if st.button("Ph√¢n t√≠ch T∆∞∆°ng t√°c", type="primary") and selected_medicines:
        with st.spinner("ƒêang ph√¢n t√≠ch t√°c d·ª•ng ph·ª• v√† t∆∞∆°ng t√°c..."):
            st.success(f"ƒêang ph√¢n t√≠ch {len(selected_medicines)} thu·ªëc ƒë√£ ch·ªçn")
            
            # Hi·ªÉn th·ªã thu·ªëc ƒë√£ ch·ªçn
            st.markdown("### Thu·ªëc ƒë√£ ch·ªçn:")
            for i, med in enumerate(selected_medicines, 1):
                st.markdown(f"{i}. **{med}**")
            
            # Ph√¢n t√≠ch gi·∫£ l·∫≠p (trong th·ª±c t·∫ø, b·∫°n s·∫Ω ph√¢n t√≠ch t∆∞∆°ng t√°c th·ª±c)
            st.markdown("### ‚ö†Ô∏è T∆∞∆°ng t√°c Ti·ªÅm ·∫©n:")
            
            if len(selected_medicines) > 1:
                st.warning("‚ö†Ô∏è Ph√°t hi·ªán nhi·ªÅu thu·ªëc - vui l√≤ng tham kh·∫£o √Ω ki·∫øn b√°c sƒ©")
                
                # Ph√¢n t√≠ch t√°c d·ª•ng ph·ª• gi·∫£ l·∫≠p
                common_side_effects = ["Bu·ªìn n√¥n", "Ch√≥ng m·∫∑t", "ƒêau ƒë·∫ßu", "M·ªát m·ªèi", "ƒêau d·∫° d√†y"]
                side_effects_data = {
                    'T√°c d·ª•ng ph·ª•': common_side_effects,
                    'T·∫ßn su·∫•t': np.random.randint(10, 80, len(common_side_effects))
                }
                
                df_side_effects = pd.DataFrame(side_effects_data)
                
                # Bi·ªÉu ƒë·ªì c·ªôt t√°c d·ª•ng ph·ª•
                fig = px.bar(df_side_effects, x='T√°c d·ª•ng ph·ª•', y='T·∫ßn su·∫•t',
                           title='T·∫ßn su·∫•t T√°c d·ª•ng Ph·ª• Th∆∞·ªùng g·∫∑p',
                           color='T·∫ßn su·∫•t',
                           color_continuous_scale='Reds')
                st.plotly_chart(fig, use_container_width=True)
                
                # Ph√¢n t√≠ch theo h·ªá c∆° quan
                categories = ['Gan', 'Th·∫≠n', 'Tim', 'H·ªá th·∫ßn kinh', 'Ti√™u h√≥a']
                category_counts = np.random.randint(1, 5, len(categories))
                
                fig_pie = px.pie(values=category_counts, names=categories,
                               title='T√°c d·ª•ng Ph·ª• theo H·ªá C∆° quan')
                st.plotly_chart(fig_pie, use_container_width=True)
            else:
                st.info("Ch·ªçn nhi·ªÅu thu·ªëc ƒë·ªÉ ph√¢n t√≠ch t∆∞∆°ng t√°c")

def chatbot_page(collections, model):
    """Trang 4: Chatbot Y t·∫ø Q&A"""
    st.markdown('<div class="main-header">üí¨ Chatbot Y t·∫ø Q&A</div>', unsafe_allow_html=True)
    
    st.markdown("### H·ªèi ƒë√°p v·ªÅ thu·ªëc v√† s·ª©c kh·ªèe b·∫±ng ng√¥n ng·ªØ t·ª± nhi√™n")
    
    # Kh·ªüi t·∫°o l·ªãch s·ª≠ chat
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    # Hi·ªÉn th·ªã tin nh·∫Øn chat
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
    
    # √î nh·∫≠p chat
    if prompt := st.chat_input("H·ªèi t√¥i v·ªÅ thu·ªëc, tri·ªáu ch·ª©ng, ho·∫∑c t√¨nh tr·∫°ng s·ª©c kh·ªèe..."):
        # Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # T·∫°o ph·∫£n h·ªìi
        with st.chat_message("assistant"):
            with st.spinner("ƒêang suy nghƒ©..."):
                # T√¨m thu·ªëc li√™n quan
                results = search_medicines(collections['drugs_main'], prompt, model, 3)
                
                if results and results['metadatas'][0]:
                    response = f"D·ª±a tr√™n c√¢u h·ªèi c·ªßa b·∫°n v·ªÅ '{prompt}', ƒë√¢y l√† m·ªôt s·ªë thu·ªëc li√™n quan:\n\n"
                    
                    for i, metadata in enumerate(results['metadatas'][0][:3]):
                        distance = results['distances'][0][i]
                        similarity = format_similarity(distance)
                        
                        response += f"**{i+1}. {metadata['medicine_name']}** (ƒê·ªô t∆∞∆°ng ƒë·ªìng: {similarity})\n"
                        response += f"- *Th√†nh ph·∫ßn*: {metadata['composition'][:60]}...\n"
                        response += f"- *C√¥ng d·ª•ng*: {metadata['uses'][:80]}...\n"
                        response += f"- *H√£ng s·∫£n xu·∫•t*: {metadata['manufacturer']}\n\n"
                    
                    response += "\n‚ö†Ô∏è **L∆∞u √Ω**: Th√¥ng tin n√†y ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o. Lu√¥n tham kh·∫£o √Ω ki·∫øn b√°c sƒ© tr∆∞·ªõc khi s·ª≠ d·ª•ng thu·ªëc."
                else:
                    response = "T√¥i kh√¥ng th·ªÉ t√¨m th·∫•y thu·ªëc c·ª• th·ªÉ cho c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ cung c·∫•p th√™m chi ti·∫øt v·ªÅ tri·ªáu ch·ª©ng ho·∫∑c lo·∫°i thu·ªëc b·∫°n ƒëang t√¨m ki·∫øm kh√¥ng?"
                
                st.markdown(response)
                
                # Th√™m ph·∫£n h·ªìi AI v√†o l·ªãch s·ª≠
                st.session_state.messages.append({"role": "assistant", "content": response})

def manufacturer_analytics_page(collections):
    """Trang 5: Ph√¢n t√≠ch Nh√† s·∫£n xu·∫•t"""
    st.markdown('<div class="main-header">üè≠ Ph√¢n t√≠ch Nh√† s·∫£n xu·∫•t</div>', unsafe_allow_html=True)
    
    st.markdown("### Ph√¢n t√≠ch c√°c c√¥ng ty d∆∞·ª£c ph·∫©m")
    
    try:
        # L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu thu·ªëc
        all_medicines = collections['drugs_main'].get(include=["metadatas"])
        
        # T·∫°o DataFrame
        medicines_df = pd.DataFrame([
            {
                'name': meta['medicine_name'],
                'manufacturer': meta['manufacturer'],
                'composition': meta['composition'],
                'uses': meta['uses'],
                'excellent_review': meta.get('excellent_review', 0),
                'average_review': meta.get('average_review', 0),
                'poor_review': meta.get('poor_review', 0)
            }
            for meta in all_medicines['metadatas']
        ])
        
        # L·∫•y top nh√† s·∫£n xu·∫•t
        manufacturer_counts = medicines_df['manufacturer'].value_counts()
        top_manufacturers = manufacturer_counts.head(20).index.tolist()
        
        # Ch·ªçn nh√† s·∫£n xu·∫•t
        selected_manufacturer = st.selectbox(
            "Ch·ªçn nh√† s·∫£n xu·∫•t ƒë·ªÉ ph√¢n t√≠ch:",
            options=top_manufacturers
        )
        
        if selected_manufacturer:
            # L·ªçc d·ªØ li·ªáu cho nh√† s·∫£n xu·∫•t ƒë√£ ch·ªçn
            manufacturer_data = medicines_df[medicines_df['manufacturer'] == selected_manufacturer]
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("T·ªïng s·ªë thu·ªëc", len(manufacturer_data))
            with col2:
                avg_excellent = manufacturer_data['excellent_review'].mean()
                st.metric("TB ƒê√°nh gi√° Xu·∫•t s·∫Øc", f"{avg_excellent:.1f}%")
            with col3:
                avg_poor = manufacturer_data['poor_review'].mean()
                st.metric("TB ƒê√°nh gi√° K√©m", f"{avg_poor:.1f}%")
            with col4:
                market_share = len(manufacturer_data) / len(medicines_df) * 100
                st.metric("Th·ªã ph·∫ßn", f"{market_share:.2f}%")
            
            # Ph√¢n b·ªë ƒë√°nh gi√°
            review_data = {
                'Lo·∫°i ƒê√°nh gi√°': ['Xu·∫•t s·∫Øc', 'Trung b√¨nh', 'K√©m'],
                'Ph·∫ßn trƒÉm': [
                    manufacturer_data['excellent_review'].mean(),
                    manufacturer_data['average_review'].mean(),
                    manufacturer_data['poor_review'].mean()
                ]
            }
            
            fig = px.pie(values=review_data['Ph·∫ßn trƒÉm'], names=review_data['Lo·∫°i ƒê√°nh gi√°'],
                        title=f'Ph√¢n b·ªë ƒê√°nh gi√° - {selected_manufacturer}',
                        color_discrete_sequence=['#2ecc71', '#f39c12', '#e74c3c'])
            st.plotly_chart(fig, use_container_width=True)
            
            # So s√°nh top nh√† s·∫£n xu·∫•t
            st.markdown("### So s√°nh Top Nh√† s·∫£n xu·∫•t")
            
            comparison_data = []
            for mfr in top_manufacturers[:10]:
                mfr_data = medicines_df[medicines_df['manufacturer'] == mfr]
                comparison_data.append({
                    'Nh√† s·∫£n xu·∫•t': mfr,
                    'S·ªë l∆∞·ª£ng Thu·ªëc': len(mfr_data),
                    'TB ƒê√°nh gi√° Xu·∫•t s·∫Øc': mfr_data['excellent_review'].mean(),
                    'TB ƒê√°nh gi√° K√©m': mfr_data['poor_review'].mean()
                })
            
            comparison_df = pd.DataFrame(comparison_data)
            
            fig_bar = px.bar(comparison_df, x='Nh√† s·∫£n xu·∫•t', y='S·ªë l∆∞·ª£ng Thu·ªëc',
                           title='S·ªë l∆∞·ª£ng Thu·ªëc theo Top Nh√† s·∫£n xu·∫•t',
                           text='S·ªë l∆∞·ª£ng Thu·ªëc')
            fig_bar.update_traces(texttemplate='%{text}', textposition='outside')
            fig_bar.update_xaxes(tickangle=45)
            st.plotly_chart(fig_bar, use_container_width=True)
            
    except Exception as e:
        st.error(f"L·ªói t·∫£i d·ªØ li·ªáu nh√† s·∫£n xu·∫•t: {e}")

def dashboard_overview_page(collections):
    """Trang 6: T·ªïng quan Dashboard"""
    st.markdown('<div class="main-header">üìä T·ªïng quan Dashboard</div>', unsafe_allow_html=True)
    
    st.markdown("### T·ªïng quan H·ªá th·ªëng v√† Th·ªëng k√™")
    
    try:
        # L·∫•y s·ªë l∆∞·ª£ng collection
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            main_count = collections['drugs_main'].count()
            st.metric("T·ªïng s·ªë Thu·ªëc", f"{main_count:,}")
        
        with col2:
            se_count = collections['drugs_side_effects'].count()
            st.metric("B·∫£n ghi T√°c d·ª•ng Ph·ª•", f"{se_count:,}")
        
        with col3:
            comp_count = collections['drugs_composition'].count()
            st.metric("B·∫£n ghi Th√†nh ph·∫ßn", f"{comp_count:,}")
        
        with col4:
            review_count = collections['drugs_reviews'].count()
            st.metric("B·∫£n ghi ƒê√°nh gi√°", f"{review_count:,}")
        
        # L·∫•y d·ªØ li·ªáu m·∫´u ƒë·ªÉ ph√¢n t√≠ch
        sample_data = collections['drugs_main'].get(
            limit=1000,
            include=["metadatas"]
        )
        
        medicines_df = pd.DataFrame([
            {
                'name': meta['medicine_name'],
                'manufacturer': meta['manufacturer'],
                'excellent_review': meta.get('excellent_review', 0),
                'uses': meta['uses']
            }
            for meta in sample_data['metadatas']
        ])
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Top nh√† s·∫£n xu·∫•t
            st.markdown("### üè≠ Top 10 Nh√† s·∫£n xu·∫•t")
            top_mfrs = medicines_df['manufacturer'].value_counts().head(10)
            
            fig_mfr = px.bar(
                x=top_mfrs.values,
                y=top_mfrs.index,
                orientation='h',
                title='S·ªë l∆∞·ª£ng Thu·ªëc theo Nh√† s·∫£n xu·∫•t'
            )
            fig_mfr.update_yaxes(categoryorder="total ascending")
            st.plotly_chart(fig_mfr, use_container_width=True)
        
        with col2:
            # Ph√¢n b·ªë ƒë√°nh gi√°
            st.markdown("### ‚≠ê Ph√¢n b·ªë ƒêi·ªÉm ƒê√°nh gi√°")
            
            # T·∫°o c√°c danh m·ª•c ƒë√°nh gi√°
            review_categories = []
            for score in medicines_df['excellent_review']:
                if score >= 70:
                    review_categories.append('Xu·∫•t s·∫Øc (70%+)')
                elif score >= 50:
                    review_categories.append('T·ªët (50-70%)')
                elif score >= 30:
                    review_categories.append('Trung b√¨nh (30-50%)')
                else:
                    review_categories.append('K√©m (<30%)')
            
            review_dist = pd.Series(review_categories).value_counts()
            
            fig_review = px.pie(
                values=review_dist.values,
                names=review_dist.index,
                title='Ph√¢n b·ªë Ch·∫•t l∆∞·ª£ng Thu·ªëc'
            )
            st.plotly_chart(fig_review, use_container_width=True)
        
        # Ph√¢n t√≠ch danh m·ª•c thu·ªëc
        st.markdown("### üíä Ph√¢n t√≠ch Danh m·ª•c Thu·ªëc")
        
        # Tr√≠ch xu·∫•t danh m·ª•c t·ª´ uses (ƒë∆°n gi·∫£n h√≥a)
        categories = []
        for uses in medicines_df['uses']:
            if 'ƒëau' in uses.lower() or 'pain' in uses.lower():
                categories.append('Gi·∫£m ƒëau')
            elif 'nhi·ªÖm khu·∫©n' in uses.lower() or 'infection' in uses.lower() or 'bacterial' in uses.lower():
                categories.append('Ch·ªëng nhi·ªÖm khu·∫©n')
            elif 'ti·ªÉu ƒë∆∞·ªùng' in uses.lower() or 'diabetes' in uses.lower():
                categories.append('Ti·ªÉu ƒë∆∞·ªùng')
            elif 'huy·∫øt √°p' in uses.lower() or 'blood pressure' in uses.lower() or 'hypertension' in uses.lower():
                categories.append('Tim m·∫°ch')
            elif 'hen suy·ªÖn' in uses.lower() or 'asthma' in uses.lower() or 'respiratory' in uses.lower():
                categories.append('H√¥ h·∫•p')
            else:
                categories.append('Kh√°c')
        
        category_dist = pd.Series(categories).value_counts()
        
        fig_cat = px.bar(
            x=category_dist.index,
            y=category_dist.values,
            title='Ph√¢n b·ªë Thu·ªëc theo Danh m·ª•c'
        )
        st.plotly_chart(fig_cat, use_container_width=True)
        
    except Exception as e:
        st.error(f"L·ªói t·∫£i d·ªØ li·ªáu dashboard: {e}")

def main():
    """·ª®ng d·ª•ng ch√≠nh"""
    # Navigation sidebar
    st.sidebar.title("üíä N·ªÅn t·∫£ng Ph√¢n t√≠ch Thu·ªëc Th√¥ng minh")
    st.sidebar.markdown("---")
    
    # Kh·ªüi t·∫°o d·ªØ li·ªáu
    if 'initialized' not in st.session_state:
        with st.spinner("ƒêang kh·ªüi t·∫°o h·ªá th·ªëng..."):
            client, collections = setup_chromadb()
            model = load_model()
            
            if client and collections and model:
                st.session_state.client = client
                st.session_state.collections = collections
                st.session_state.model = model
                st.session_state.initialized = True
            else:
                st.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o h·ªá th·ªëng. Vui l√≤ng ki·ªÉm tra thi·∫øt l·∫≠p.")
                return
    
    # Menu navigation
    pages = {
        "üîç T√¨m ki·∫øm Ng·ªØ nghƒ©a": semantic_search_page,
        "üîÑ Thay th·∫ø Thu·ªëc": drug_substitution_page,
        "‚ö†Ô∏è Ph√¢n t√≠ch T√°c d·ª•ng Ph·ª•": side_effects_analysis_page,
        "üí¨ Chatbot Y t·∫ø Q&A": chatbot_page,
        "üè≠ Ph√¢n t√≠ch Nh√† s·∫£n xu·∫•t": manufacturer_analytics_page,
        "üìä T·ªïng quan Dashboard": dashboard_overview_page
    }
    
    selected_page = st.sidebar.selectbox("Ch·ªçn ch·ª©c nƒÉng:", list(pages.keys()))
    
    # Tr·∫°ng th√°i h·ªá th·ªëng
    st.sidebar.markdown("---")
    st.sidebar.markdown("### Tr·∫°ng th√°i H·ªá th·ªëng")
    st.sidebar.success("‚úÖ ChromaDB ƒê√£ k·∫øt n·ªëi")
    st.sidebar.success("‚úÖ M√¥ h√¨nh AI")
    st.sidebar.info(f"üìä {st.session_state.collections['drugs_main'].count():,} thu·ªëc c√≥ s·∫µn")
    
    # Hi·ªÉn th·ªã trang ƒë√£ ch·ªçn
    if selected_page in ["üí¨ Chatbot Y t·∫ø Q&A"]:
        pages[selected_page](st.session_state.collections, st.session_state.model)
    elif selected_page in ["üè≠ Ph√¢n t√≠ch Nh√† s·∫£n xu·∫•t", "üìä T·ªïng quan Dashboard"]:
        pages[selected_page](st.session_state.collections)
    elif selected_page in ["‚ö†Ô∏è Ph√¢n t√≠ch T√°c d·ª•ng Ph·ª•"]:
        pages[selected_page](st.session_state.collections)
    else:
        pages[selected_page](st.session_state.collections, st.session_state.model)

if __name__ == "__main__":
    main()